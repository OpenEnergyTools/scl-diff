function isInputLeaf(input, allInputs) {
    let sameInputs = 0;
    for (const value of allInputs)
        if (value === input)
            sameInputs++;
    return input.querySelectorAll("ExtRef").length === sameInputs;
}
/**
 * Makes sure to not leave empty `Inputs` element after removing
 * its child `ExtRef` elements using [[`extRefedits`]]
 * @returns edits to remove `Inputs` when empty
 * */
export function removeInputs(extRefs) {
    const removeInputs = [];
    const parentInputs = extRefs
        .map((remove) => remove.node.parentElement)
        .filter((input) => input);
    parentInputs.forEach((input, _index, inputs) => {
        const inputNotRemovedYet = !removeInputs.some((removeInput) => removeInput.node === input);
        if (isInputLeaf(input, inputs) && inputNotRemovedYet)
            removeInputs.push({ node: input });
    });
    return extRefs.concat(removeInputs);
}
//# sourceMappingURL=removeInputs.js.map