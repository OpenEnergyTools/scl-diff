import { lnInstGenerator } from "../../generator/lnInstGenerator.js";
export function type(supervision) {
    const serviceType = supervision.sourceControlBlock.tagName;
    return serviceType === "GSEControl" ? "GoCBRef" : "SvCBRef";
}
export function supervisionLnClass(supervision) {
    const serviceType = supervision.sourceControlBlock.tagName;
    return serviceType === "GSEControl" ? "LGOS" : "LSVS";
}
/** @returns Unique attribute `inst` for supervision logical nodes. */
export function globalLnInstGenerator() {
    const lnInstGenerators = new Map();
    return (supervision) => {
        const ied = supervision.subscriberIedOrLn;
        const lnClass = supervisionLnClass(supervision);
        const formLn = ied.querySelector(`LN[lnClass="${lnClass}"]`);
        const lDevice = formLn.parentElement;
        const iedName = `${ied.getAttribute("name")}`;
        if (!lnInstGenerators.has(iedName))
            lnInstGenerators.set(iedName, lnInstGenerator(lDevice, "LN"));
        return lnInstGenerators.get(iedName)(lnClass);
    };
}
/** @returns Whether child `DA` with name `setSrcRef` can edited by SCL editor */
export function isSrcRefEditable(supervisionLn) {
    const lnClass = supervisionLn.getAttribute("lnClass");
    const cbRefType = lnClass === "LGOS" ? "GoCBRef" : "SvCBRef";
    if (supervisionLn.querySelector(`:scope > DOI[name="${cbRefType}"] > 
        DAI[name="setSrcRef"][valImport="true"][valKind="RO"],
       :scope > DOI[name="${cbRefType}"] > 
        DAI[name="setSrcRef"][valImport="true"][valKind="Conf"]`))
        return true;
    const rootNode = supervisionLn.ownerDocument;
    const lnType = supervisionLn.getAttribute("lnType");
    const goOrSvCBRef = rootNode.querySelector(`DataTypeTemplates > 
        LNodeType[id="${lnType}"][lnClass="${lnClass}"] > DO[name="${cbRefType}"]`);
    const cbRefId = goOrSvCBRef?.getAttribute("type");
    const setSrcRef = rootNode.querySelector(`DataTypeTemplates > DOType[id="${cbRefId}"] > DA[name="setSrcRef"]`);
    return ((setSrcRef?.getAttribute("valKind") === "Conf" ||
        setSrcRef?.getAttribute("valKind") === "RO") &&
        setSrcRef.getAttribute("valImport") === "true");
}
//# sourceMappingURL=foundation.js.map