import { createElement } from "../foundation/utils.js";
import { getReference } from "../tBaseElement/getReference.js";
import { uniqueElementName } from "../foundation/uniqueElementName.js";
import { connectedAp } from "../tControlWithIEDName/connctedAp.js";
import { createSMV } from "../tSMV/createSMV.js";
import { pathId } from "../tControl/pathId.js";
import { canAddSampledValueControl } from "../tSampledValueControl/canAddSampledValueControl.js";
function invalidSampledValueControl(ln0, name, datSet) {
    const uniqueName = name
        ? !ln0.querySelector(`:scope > SampledValueControl[name="${name}"]`)
        : true;
    const validDataSet = datSet
        ? !!ln0.querySelector(`:scope > DataSet[name="${datSet}"]`)
        : true;
    return !(uniqueName && validDataSet && canAddSampledValueControl(ln0));
}
/** Utility function to create schema valid `SampledValueControl` and `SMV` elements
 * @parent Parent element such as `LN0`, `LDevice`, `AccessPoint` and `IED`
 * @options Configuration for SampledValueControl/SMV element
 * @returns Edit inserting new `SampledValueControl` to [[`parent`]] element and when possible
 *          `SMV` to connected `ConnectedAP`
 * */
export function createSampledValueControl(parent, options = {
    smvControl: {},
    smv: {},
}) {
    const ln0 = parent.tagName === "LN0" ? parent : parent.querySelector("LN0");
    if (!ln0)
        return [];
    const name = options.smvControl?.name;
    const datSet = options.smvControl?.datSet;
    if (!options.skipCheck && invalidSampledValueControl(ln0, name, datSet))
        return [];
    const attributes = { ...options.smvControl };
    const cbName = name ? name : uniqueElementName(ln0, "SampledValueControl");
    if (!options.smvControl?.name)
        attributes.name = cbName;
    if (!options.smvControl?.multicast)
        attributes.multicast = "true";
    if (!options.smvControl?.smpRate)
        attributes.smpRate = "80";
    if (!options.smvControl?.nofASDU)
        attributes.nofASDU = "1";
    if (!options.smvControl?.smpMod)
        attributes.smpMod = "SmpPerPeriod";
    if (!options.smvControl?.smvID)
        attributes.smvID = pathId(ln0, cbName);
    const generatedConfRev = options.smvControl?.datSet ? "1" : "0";
    const userConfRev = options.smvControl?.confRev;
    attributes.confRev = userConfRev ? userConfRev : generatedConfRev;
    const smvControl = createElement(ln0.ownerDocument, "SampledValueControl", attributes);
    const smvOpts = createElement(ln0.ownerDocument, "SmvOpts", options.smvOpts ?? {});
    smvControl.appendChild(smvOpts);
    const edits = [];
    edits.push({
        parent: ln0,
        node: smvControl,
        reference: getReference(ln0, "SampledValueControl"),
    });
    const connAp = connectedAp(ln0, options.smv?.apName);
    if (!connAp)
        return edits;
    const ldInst = ln0.closest("LDevice").getAttribute("inst");
    if (!ldInst || !cbName)
        return edits;
    const smvCreateOptions = options.smv ?? {};
    delete smvCreateOptions.apName;
    const smvAttrs = { ldInst, cbName };
    const smvEdit = createSMV(connAp, smvAttrs, smvCreateOptions);
    if (smvEdit)
        edits.push(smvEdit);
    return edits;
}
//# sourceMappingURL=createSampledValueControl.js.map