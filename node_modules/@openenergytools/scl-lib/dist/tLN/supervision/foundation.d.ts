export type Supervision = {
    /**
     * Reference to the supervision location either as the subscriber IED
     * or the logical node of the class `LGOS`/`LSVS` itself
     */
    subscriberIedOrLn: Element;
    /** The control block to be supervised */
    sourceControlBlock: Element;
};
export type SupervisionOptions = {
    /** Whether supervision instantiation shall be with new logical node instance */
    newSupervisionLn: boolean;
    /**
     * A fixed `inst` attribute for a new logical node (LGOS/LSVS) instance
     * otherwise ignored. The default -1 sets the `inst` attribute automatically.
     */
    fixedLnInst: number;
    /** Whether to check for `valKind`/`valImport`. Defaulting to true */
    checkEditableSrcRef: boolean;
    /**
     * Whether the given control block is already supervised in the subscriber
     * IED. Defaulting to true.
     */
    checkDuplicateSupervisions: boolean;
    /**
     * Whether a new supervision would exceed the limits set in the `Services`
     * section or whether an existing supervision LN control block reference is
     * empty or invalid and can be used. Defaulting to true.
     */
    checkMaxSupervisionLimits: boolean;
};
export declare function type(supervision: Supervision): "GoCBRef" | "SvCBRef";
export declare function supervisionLnClass(supervision: Supervision): "LGOS" | "LSVS";
/** @returns Unique attribute `inst` for supervision logical nodes. */
export declare function globalLnInstGenerator(): (supervision: Supervision) => string | undefined;
/** @returns Whether child `DA` with name `setSrcRef` can edited by SCL editor */
export declare function isSrcRefEditable(supervisionLn: Element): boolean;
