import { createElement } from "../foundation/utils.js";
import { getReference } from "../tBaseElement/getReference.js";
import { connectedAp } from "../tControlWithIEDName/connctedAp.js";
import { pathId } from "../tControl/pathId.js";
import { uniqueElementName } from "../foundation/uniqueElementName.js";
import { canAddGSEControl } from "./canAddGSEControl.js";
import { createGSE } from "../tGSE/createGSE.js";
function invalidGSEControl(ln0, name, datSet) {
    const uniqueName = name
        ? !ln0.querySelector(`:scope > GSEControl[name="${name}"]`)
        : true;
    const validDataSet = datSet
        ? !!ln0.querySelector(`:scope > DataSet[name="${datSet}"]`)
        : true;
    return !(uniqueName && validDataSet && canAddGSEControl(ln0));
}
/** Utility function to create schema valid `GSEControl` and `GSE` elements
 * @parent Parent element such as `LN0`, `LDevice`, `AccessPoint` and `IED`
 * @options Configuration for GSEControl/GSE element
 * @returns Edit inserting new `GSEControl` to [[`parent`]] element and when possible
 *          `GSE` to connected `ConnectedAP`
 * */
export function createGSEControl(parent, options = { gseControl: {}, gse: {} }) {
    const ln0 = parent.tagName === "LN0" ? parent : parent.querySelector("LN0");
    if (!ln0)
        return [];
    const name = options.gseControl?.name;
    const datSet = options.gseControl?.datSet;
    if (!options.skipCheck && invalidGSEControl(ln0, name, datSet))
        return [];
    const attributes = { ...options.gseControl };
    const cbName = name ? name : uniqueElementName(ln0, "GSEControl");
    if (!options.gseControl?.name)
        attributes.name = cbName;
    if (!options.gseControl?.confRev)
        attributes.confRev = "1";
    if (!options.gseControl?.type)
        attributes.type = "GOOSE";
    if (!options.gseControl?.appID)
        attributes.appID = pathId(ln0, cbName);
    const generatedConfRev = options.gseControl?.datSet ? "1" : "0";
    const userConfRev = options.gseControl?.confRev;
    attributes.confRev = userConfRev ? userConfRev : generatedConfRev;
    const gseControl = createElement(ln0.ownerDocument, "GSEControl", attributes);
    const edits = [];
    edits.push({
        parent: ln0,
        node: gseControl,
        reference: getReference(ln0, "GSEControl"),
    });
    const connAp = connectedAp(ln0, options.gse?.apName);
    if (!connAp)
        return edits;
    const ldInst = ln0.closest("LDevice").getAttribute("inst");
    if (!ldInst || !cbName)
        return edits;
    const gseCreateOptions = options.gse ?? {};
    delete gseCreateOptions.apName;
    const gseAttrs = { ldInst, cbName };
    const gseEdit = createGSE(connAp, gseAttrs, gseCreateOptions);
    if (gseEdit)
        edits.push(gseEdit);
    return edits;
}
//# sourceMappingURL=createGSEControl.js.map