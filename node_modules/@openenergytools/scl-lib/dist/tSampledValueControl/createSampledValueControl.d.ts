import { Insert } from "../foundation/utils.js";
export type CreateSampledValueControlOptions = {
    smvControl?: {
        /** `SampledValueControl` name. Must be unique.
         * When missing a unique name starting with `newSampledValueControl_xx` is set */
        name?: string;
        desc?: string;
        /** Id for the new SampledValueControl. Default is IED.name/LDevice.inst/LLN0/SampledValueControl.name */
        smvID?: string;
        /** Whether the SampledValueControl is multicast. Set to true if missing */
        multicast?: "true" | "false";
        /** The sample rate of the sampled value stream. Set to '80' is missing */
        smpRate?: string;
        /** How many samples are packed into one ethernet packet. Set to '1' if missing */
        nofASDU?: string;
        /** The sample mode of the sample value stream */
        smpMod?: "SmpPerPeriod" | "SmpPerSec" | "SecPerSmp";
        /** The security setting of the sample value stream */
        securityEnable?: "None" | "Signature" | "SignatureAndEncryption";
        /** Reference to an existing `DataSet` */
        datSet?: string | null;
        /**User-defined configuration revision (confRev). Overwrites
         *logic to to set confRev acc. to IEC 61850.*/
        confRev?: string | null;
    };
    smvOpts?: {
        /** Whether refresh time is part if the SV stream. Defaults to false. */
        refreshTime?: "true" | "false";
        /** Whether synchronized setting is part if the SV stream. Defaults to true. */
        sampleSynchronized?: "true" | "false";
        /** Whether sampled rate is part if the SV stream. Defaults to false. */
        sampleRate?: "true" | "false";
        /** Whether dataSet reference is part if the SV stream. Defaults to false. */
        dataSet?: "true" | "false";
        /** Whether security setting is part if the SV stream. Defaults to false. */
        security?: "true" | "false";
        /** Whether refresh time is part if the SV stream. Defaults to false. */
        timestamp?: "true" | "false";
        /** Whether sync source ID is part if the SV stream. Defaults to false. */
        synchSourceId?: "true" | "false";
    };
    smv?: {
        /** The AccessPoint that shall publish the sampled value stream.
         *  Default the AccessPoint holding the Server element */
        apName?: string;
        /** MAC-Address within `P` element in the `SMV` element */
        mac?: string;
        /** APPID within `P` element in the `SMV` element */
        appId?: string;
        /** VLAN-ID within `P` element in the `SMV` element */
        vlanId?: string;
        /** VLAN-PRIORITY within `P` element in the `SMV` element */
        vlanPriority?: string;
    };
    /** If true, skips check for unique SampledValueControl name,
     * whether `datSet` is pointing to valid `DataSet`
     * and whether additional SampledValueControl is allowed in IED/AccessPoint. */
    skipCheck?: boolean;
};
/** Utility function to create schema valid `SampledValueControl` and `SMV` elements
 * @parent Parent element such as `LN0`, `LDevice`, `AccessPoint` and `IED`
 * @options Configuration for SampledValueControl/SMV element
 * @returns Edit inserting new `SampledValueControl` to [[`parent`]] element and when possible
 *          `SMV` to connected `ConnectedAP`
 * */
export declare function createSampledValueControl(parent: Element, options?: CreateSampledValueControlOptions): Insert[];
