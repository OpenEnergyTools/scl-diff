import { createElement } from "../foundation/utils.js";
import { canAddReportControl } from "./canAddReportControl.js";
import { uniqueElementName } from "../foundation/uniqueElementName.js";
import { getReference } from "../tBaseElement/getReference.js";
function invalid(anyLn, name, datSet) {
    const uniqueName = name
        ? !anyLn.querySelector(`:scope > ReportControl[name="${name}"]`)
        : true;
    const validDataSet = datSet
        ? !!anyLn.querySelector(`:scope > DataSet[name="${datSet}"]`)
        : true;
    return !(uniqueName && validDataSet && canAddReportControl(anyLn));
}
/** Function processing `ReportControl` creation. Returns `null`, if new `ReportControl` cannot
 * be added to [[`parent`]].
 * @param parent - Direct parent `LN`, `LN0` or indirect parents
 *                `LDevice`, `AccessPoint` or `IED`. In the later case first `LN0` is picked.
 * @param options - Configuration options.
 * @returns edit inserting `ReportControl` to [[`parent`]] element or `null`
 * */
export function createReportControl(parent, options = { rpt: {}, trgOps: {}, optFields: {} }) {
    const anyLn = parent.tagName === "LN0" || parent.tagName === "LN"
        ? parent
        : parent.querySelector("LN0, LN");
    if (!anyLn)
        return null;
    if (!options.skipCheck &&
        invalid(anyLn, options.rpt?.name, options.rpt?.datSet))
        return null;
    const rptAttrs = { ...options.rpt };
    const trgOpsAttrs = { ...options.trgOps };
    const optFieldsAttrs = {
        ...options.optFields,
    };
    if (!options.rpt?.name)
        rptAttrs.name = uniqueElementName(anyLn, "ReportControl");
    if (!options.rpt?.buffered)
        rptAttrs.buffered = "true";
    if (!options.rpt?.rptID)
        rptAttrs.rptID = "";
    if (!options.rpt?.bufTime)
        rptAttrs.bufTime = "100";
    if (options.trgOps?.period === "true" && !options.rpt?.intgPd)
        rptAttrs.intgPd = "1000";
    const confRev = options.confRev
        ? options.confRev
        : rptAttrs.datSet
            ? "1"
            : "0";
    if (options.rpt?.intgPd &&
        options.rpt?.intgPd !== "0" &&
        (!options.trgOps?.period || options.trgOps.period === "false"))
        trgOpsAttrs.period = "true";
    const reportControl = createElement(anyLn.ownerDocument, "ReportControl", {
        ...rptAttrs,
        confRev,
    });
    if (Object.keys(trgOpsAttrs).length) {
        const trgOps = createElement(anyLn.ownerDocument, "TrgOps", trgOpsAttrs);
        reportControl.insertBefore(trgOps, null);
    }
    if (Object.keys(optFieldsAttrs).length) {
        const optFields = createElement(anyLn.ownerDocument, "OptFields", optFieldsAttrs);
        reportControl.insertBefore(optFields, null);
    }
    if (options.instances) {
        const rptEnabled = createElement(anyLn.ownerDocument, "RptEnabled", {
            max: options.instances,
        });
        reportControl.insertBefore(rptEnabled, null);
    }
    return {
        parent: anyLn,
        node: reportControl,
        reference: getReference(anyLn, "ReportControl"),
    };
}
//# sourceMappingURL=createReportControl.js.map