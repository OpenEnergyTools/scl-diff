export function isUpdate(edit) {
    return edit.element !== undefined;
}
export function isRemove(edit) {
    return (edit.parent === undefined && edit.node !== undefined);
}
export function isInsert(edit) {
    return edit.parent !== undefined;
}
/** Utility function to create element with `tagName` and its`attributes` */
export function createElement(doc, tag, attrs) {
    const element = doc.createElementNS(doc.documentElement.namespaceURI, tag);
    Object.entries(attrs)
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        .filter(([_, value]) => value !== null)
        .forEach(([name, value]) => element.setAttribute(name, value));
    return element;
}
/** @returns the cartesian product of `arrays` */
export function crossProduct(...arrays) {
    return arrays.reduce((a, b) => a.flatMap((d) => b.map((e) => [d, e].flat())), [[]]);
}
//# sourceMappingURL=utils.js.map