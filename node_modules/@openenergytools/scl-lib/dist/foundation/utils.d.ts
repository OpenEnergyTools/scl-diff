/** Intent to `parent.insertBefore(node, reference)` */
export type Insert = {
    parent: Node;
    node: Node;
    reference: Node | null;
};
/** Intent to set or remove (if null) attributes on element */
export type Update = {
    element: Element;
    attributes: Partial<Record<string, string | null>>;
};
/** Intent to remove a node from its ownerDocument */
export type Remove = {
    node: Node;
};
/** Represents the user's intent to change an XMLDocument */
export type Edit = Insert | Update | Remove | Edit[];
export declare function isUpdate(edit: Edit): edit is Update;
export declare function isRemove(edit: Edit): edit is Remove;
export declare function isInsert(edit: Edit): edit is Insert;
/** Utility function to create element with `tagName` and its`attributes` */
export declare function createElement(doc: XMLDocument, tag: string, attrs: Record<string, string | null>): Element;
/** @returns the cartesian product of `arrays` */
export declare function crossProduct<T>(...arrays: T[][]): T[][];
