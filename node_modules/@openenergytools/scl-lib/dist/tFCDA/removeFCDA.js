import { controlBlocks } from "../tControl/controlBlocks.js";
import { matchDataAttributes } from "../tExtRef/matchDataAttributes.js";
import { matchSrcAttributes } from "../tExtRef/matchSrcAttributes.js";
import { unsubscribe } from "../tExtRef/unsubscribe.js";
export function fCDAsSubscription(fcda) {
    const doc = fcda.ownerDocument;
    const iedName = fcda.closest("IED")?.getAttribute("name");
    if (!iedName)
        return [];
    const isEd1 = !fcda.ownerDocument
        .querySelector("SCL")
        ?.getAttribute("version");
    if (isEd1)
        return Array.from(doc.querySelectorAll(`:root>IED>AccessPoint>Server>LDevice>LN0>Inputs>ExtRef[iedName="${iedName}"],
        :root>IED>AccessPoint>Server>LDevice>LN>Inputs>ExtRef[iedName="${iedName}"]`)).filter((extRef) => matchDataAttributes(extRef, fcda));
    return controlBlocks(fcda).flatMap((controlBlock) => Array.from(doc.querySelectorAll(`:root>IED>AccessPoint>Server>LDevice>LN0>Inputs>ExtRef[iedName="${iedName}"],
        :root>IED>AccessPoint>Server>LDevice>LN>Inputs>ExtRef[iedName="${iedName}"]`)).filter((extRef) => matchDataAttributes(extRef, fcda) &&
        matchSrcAttributes(extRef, controlBlock)));
}
/** Utility function to remove `FCDA` element that checks for possible
 * subscription that need to be updated or removed as well.
 * @param remove - remove edit (remove.node must be FCDA)
 * @returns Edit array removing FCDA and its subscriber information */
export function removeFCDA(remove) {
    if (remove.node.tagName !== "FCDA")
        return [];
    const fcda = remove.node;
    const removeActionFcda = [remove];
    const extRefActions = [];
    extRefActions.push(...unsubscribe(fCDAsSubscription(fcda)));
    return removeActionFcda.concat(extRefActions);
}
//# sourceMappingURL=removeFCDA.js.map