import { controlBlocks } from "../tControl/controlBlocks.js";
import { fCDAsSubscription } from "../tFCDA/removeFCDA.js";
import { unsubscribe } from "../tExtRef/unsubscribe.js";
/**
 * Utility function to remove the element `DataSet`.
 * Also checks if data must be unsubscribed, subscription supervision need
 * to be removed and changes on control blocks must be done.
 * @param remove - Remove edit of a DataSet
 * @returns Edit array with remove edit and additional edits
 */
export function removeDataSet(remove) {
    if (remove.node.tagName !== "DataSet")
        return [];
    const dataSet = remove.node;
    const dataSetRemove = [{ node: dataSet }];
    const fCDAs = Array.from(dataSet.querySelectorAll(":scope > FCDA"));
    const extRefs = fCDAs.flatMap((fcda) => fCDAsSubscription(fcda));
    const extRefEdits = [];
    extRefEdits.push(...unsubscribe(extRefs));
    const ctrlBlockUpdates = controlBlocks(dataSet).map((ctrlBlock) => ({
        element: ctrlBlock,
        attributes: { datSet: null, confRev: "0" },
    }));
    return dataSetRemove.concat(extRefEdits, ctrlBlockUpdates);
}
//# sourceMappingURL=removeDataSet.js.map