import { createElement } from "../foundation/utils.js";
import { getReference } from "../tBaseElement/getReference.js";
import { changeGseOrSmvAddress, } from "../tAddress/changeGseOrSmvAddress.js";
function changeGseTiming(gSE, options) {
    const edits = [];
    const oldMinTime = gSE.querySelector("MinTime");
    const oldMaxTime = gSE.querySelector("MaxTime");
    if (options.MinTime) {
        const newMinTime = createElement(gSE.ownerDocument, "MinTime", {
            unit: "s",
            multiplier: "m",
        });
        newMinTime.textContent = options.MinTime;
        edits.push({
            parent: gSE,
            node: newMinTime,
            reference: getReference(gSE, "MinTime"),
        });
    }
    if (oldMinTime)
        edits.push({ node: oldMinTime });
    if (options.MaxTime) {
        const newMaxTime = createElement(gSE.ownerDocument, "MaxTime", {
            unit: "s",
            multiplier: "m",
        });
        newMaxTime.textContent = options.MaxTime;
        edits.push({
            parent: gSE,
            node: newMaxTime,
            reference: getReference(gSE, "MaxTime"),
        });
    }
    if (oldMaxTime)
        edits.push({ node: oldMaxTime });
    return edits;
}
/** Utility function to change the content of the element `GSE`
 * including the child `Address` and the children `MinTime`/`MaxTime`
 * @param element - the element to be updated
 * @param options - the requested changes
 * @returns Edit array updating GSEs children Address, MinTine and MaxTime
 * */
export function changeGSEContent(element, options) {
    const addressEdits = options.address
        ? changeGseOrSmvAddress(element, options.address)
        : [];
    const timeEdits = options.timing
        ? changeGseTiming(element, options.timing)
        : [];
    return addressEdits.concat(timeEdits);
}
//# sourceMappingURL=changeGSEContent.js.map