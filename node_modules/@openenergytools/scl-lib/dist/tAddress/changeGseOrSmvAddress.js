import { createElement } from "../foundation/utils.js";
import { getReference } from "../tBaseElement/getReference.js";
export function changeGseOrSmvAddress(gseOrSmv, options) {
    const edits = [];
    const newAddress = createElement(gseOrSmv.ownerDocument, "Address", {});
    const attributes = {};
    if (options.mac)
        attributes["MAC-Address"] = options.mac;
    if (options.appId)
        attributes.APPID = options.appId;
    if (options.vlanId)
        attributes["VLAN-ID"] = options.vlanId;
    if (options.vlanPriority)
        attributes["VLAN-PRIORITY"] = options.vlanPriority;
    Object.entries(attributes)
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        .filter(([_, value]) => value !== null)
        .forEach(([type, value]) => {
        const child = createElement(gseOrSmv.ownerDocument, "P", { type });
        if (options.instType === undefined) {
            // take over old xsi:type
            const existXsiType = gseOrSmv
                .querySelector(`:scope > Address > P[type="${type}"]`)
                ?.hasAttribute("xsi:type");
            if (existXsiType)
                child.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "xsi:type", `tP_${type}`);
        }
        else if (options.instType)
            child.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "xsi:type", `tP_${type}`);
        child.textContent = value;
        newAddress.appendChild(child);
    });
    edits.push({
        parent: gseOrSmv,
        node: newAddress,
        reference: getReference(gseOrSmv, "Address"),
    });
    const oldAddress = gseOrSmv.querySelector("Address");
    if (oldAddress)
        edits.push({ node: oldAddress });
    return edits;
}
//# sourceMappingURL=changeGseOrSmvAddress.js.map