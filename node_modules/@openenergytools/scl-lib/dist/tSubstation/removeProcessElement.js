function isBusBasCNode(cNode) {
    return cNode.parentElement?.children.length === 1;
}
function existOtherTerminalConnection(cNode, terminal) {
    return !!Array.from(cNode.ownerDocument.querySelectorAll(`Terminal[connectivityNode="${cNode.getAttribute("pathName")}"]`)).filter((otherTerminal) => otherTerminal !== terminal).length;
}
function cNodesPerTerminal(terminal) {
    return Array.from(terminal.ownerDocument.querySelectorAll(`ConnectivityNode[pathName="${terminal.getAttribute("connectivityNode")}"]`));
}
function terminalPerCNode(cNode) {
    return Array.from(cNode.ownerDocument.querySelectorAll(`Terminal[connectivityNode="${cNode.getAttribute("pathName")}"]`));
}
function outOfScopeTerminal(root, terminal) {
    return !Array.from(root.querySelectorAll("Terminal")).find((ancestorTerminal) => ancestorTerminal === terminal);
}
function outOfScopeCNode(root, cNode) {
    return !Array.from(root.querySelectorAll("ConnectivityNode")).find((ancestorCNode) => ancestorCNode === cNode);
}
/** Updates remove edit for process type element
 * includes orphan Terminal's and orphan ConnectivityNode's
 * > NOTE: Process type element potentially hold `ConnectivityNode` and
 * > `Terminal`. Removing those can leave orphan elements
 * @param remove - remove edit on precess level elements
 * @return - enriched remove edit array
 */
export function removeProcessElement(remove) {
    const element = remove.node;
    const cNodes = Array.from(element.querySelectorAll("ConnectivityNode"));
    const removeTerminals = cNodes.flatMap((cNode) => {
        return terminalPerCNode(cNode)
            .filter((terminal) => outOfScopeTerminal(element, terminal))
            .map((terminal) => {
            return {
                node: terminal,
            };
        });
    });
    const terminals = Array.from(element.querySelectorAll("Terminal"));
    const removeCNodes = terminals.flatMap((terminal) => {
        return cNodesPerTerminal(terminal)
            .filter((cNode) => outOfScopeCNode(element, cNode))
            .filter((cNode) => existOtherTerminalConnection(cNode, terminal))
            .filter((cNode) => !isBusBasCNode(cNode))
            .map((cNode) => {
            return { node: cNode };
        });
    });
    return [remove, ...removeTerminals, ...removeCNodes];
}
//# sourceMappingURL=removeProcessElement.js.map