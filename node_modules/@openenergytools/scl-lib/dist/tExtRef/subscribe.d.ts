import { Insert, Update } from "../foundation/utils.js";
export type SubscribeOptions = {
    /** Disables checks before subscription. !!Use with care */
    force: boolean;
    /** Whether to ignore adding subscription supervision (LGOS / LSVS). Default false */
    ignoreSupervision: boolean;
    /** Whether to check only service type (pServT) and basic type (not pDO and pLN). Default false */
    checkOnlyBType: boolean;
};
export type ValidSubscribeOptions = {
    /** Whether to check only service type (pServT) and basic type (not pDO and pLN). Default false */
    checkOnlyBType: boolean;
};
export type Connection = {
    /** Can be `LN0`, `LN`, `Inputs` or `ExtRef` */
    sink: Element;
    source: {
        /** `FCDA` element with or without `daName` */
        fcda: Element;
        /** `ReportControl`, `GSEControl`, `SampledValueControl` */
        controlBlock?: Element;
    };
};
/**
 * A function to subscribe [[`source`]](s) to [[`sink`]](s).
 * > Be aware that this function is producing a diff to the actual SCL.
 * > It is therefore crucial to make sure that at the point of calling
 * > this function the SCL is up to date.
 * @example
 * ```ts
 * // do not do this
 * const diff1 = subscribe(conn1);
 * const diff2 = subscribe(conn2);
 * .dispatch(editEvent([diff1, diff2]));
 *
 * // better do this
 * const diff = subscribe([conn1, conn2]);
 * .dispatch(editEvent(diff))
 * ```
 * @param sink - Can be `LN0`, `LN` and `Inputs`
 * for non-later-binding type of subscription and `ExtRef` with `intAddr`
 * for later binding type subscription.
 * @param source.fcda - `FCDA` element
 * @param source.controlBlock - The control block carrying the [[`source.fcda`]]
 * @returns An array of edits to do a valid subscription
 */
export declare function subscribe(connectionOrConnections: Connection | Connection[], options?: SubscribeOptions): (Insert | Update)[];
